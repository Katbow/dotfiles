" Section: Vundle

  set nocompatible              " be iMproved, required
  filetype off                  " required


  " VUNDLE
  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/bundle/Vundle.vim
  scriptencoding utf-8
  call vundle#begin('~/.vim/bundle')

  Plugin 'gmarik/Vundle.vim'
  Plugin 'rking/ag.vim'
  Plugin 'kien/ctrlp.vim'
  Plugin 'scrooloose/nerdtree'
  Plugin 'scrooloose/nerdcommenter'
  " Plugin 'luochen1990/rainbow'
  Plugin 'bling/vim-airline'
  Plugin 'tpope/vim-endwise'
  Plugin 'elixir-lang/vim-elixir'
  Plugin 'tpope/vim-rails'
  Plugin 'kchmck/vim-coffee-script'
  Plugin 'Lokaltog/vim-easymotion'
  Plugin 'vim-ruby/vim-ruby'
  Plugin 'slim-template/vim-slim'
  Plugin 'tpope/vim-fugitive'
  Plugin 'tpope/vim-surround'
  Plugin 'scrooloose/syntastic'
  Plugin 'christoomey/vim-tmux-navigator' "Easy Pane Switching
  Plugin 'jgdavey/vim-turbux' " TDD - run tests easily
  Plugin 'benmills/vimux'
  Plugin 'Valloric/YouCompleteMe'

  call vundle#end()            " required
  filetype plugin indent on    " required

" Section: Basic VIM Setup
  " Remap leader key
  let mapleader=","

  ",v brings up my .vimrc
  map <leader>v :sp ~/.vimrc<CR><C-W>_
  ",V reloads it -- making all changes active (have to save first)
  map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

  " the finder window
  nmap <Leader>f :CtrlP<CR>
  nmap <Leader>F :CtrlP<CR><F5>
  " let ctrlp see hidden files by default
  let g:ctrlp_show_hidden = 1

  " Make backspace work in insert mode
  set backspace=indent,eol,start

  " Display line numbers on the left
  set number
  " Put temp / swp files in specific place to keep local dir clean
  set directory=/tmp/

  " paste toggle
  nnoremap <leader>p :set invpaste paste?<CR>
  set pastetoggle=<leader>p
  set showmode

  " Enable per-directory .vimrc files
  " This lets you customize some things per the project you're in
  set exrc
  set secure  " disable unsafe commands in local .vimrc files

" Section: Indentation
  set autoindent
  set shiftwidth=2
  set softtabstop=2
  set tabstop=2
  set expandtab

" Section: Colours!
  syntax enable
  set background=dark
  colorscheme solarized
  let g:rainbow_active = 1
  let g:rainbow_conf = {
  \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
  \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
  \   'operators': '_,_',
  \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
  \   'separately': {
  \       '*': {},
  \       'tex': {
  \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
  \       },
  \       'lisp': {
  \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
  \       },
  \       'vim': {
  \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
  \       },
  \       'html': 0,
  \       'css': 0,
  \   }
  \}

" Section: Search
  " Case insensitive search
  set ignorecase
  " Space bar gets rid of search
  nmap <space> :nohlsearch<CR>
  " Highlight matches
  set hlsearch

" Section: Whitespace
  " Display extra whitespace
  set list listchars=tab:»·,trail:·
  " Delete extra whitespace on save
  autocmd BufWritePre *.py :%s/\s\+$//e
  autocmd BufWritePre .vimrc :%s/\s\+$//e
  " unwanted whitespace removal/cleaning
  autocmd BufWritePre *.rb :%s/\s\+$//e
  autocmd BufWritePre *.py :%s/\s\+$//e
  autocmd BufWritePre *.php :%s/\s\+$//e
  autocmd BufWritePre *.haml :%s/\s\+$//e
  autocmd BufWritePre *.slim :%s/\s\+$//e
  autocmd BufWritePre *.js :%s/\s\+$//e
  autocmd BufWritePre *.jsx :%s/\s\+$//e
  autocmd BufWritePre *.coffee :%s/\s\+$//e
  autocmd BufWritePre *.feature :%s/\s\+$//e
  autocmd BufWritePre *.slimbars :%s/\s\+$//e

" Section: Turbux TDD - Keymaps for running tests
  " Specify Commands
  let g:turbux_command_rspec  = 'time rspec'
  let g:turbux_command_test_unit  = 'time test'
  let g:turbux_command_cucumber = 'time cucumber'

  " Keymaps
  map <C-T> <Plug>SendTestToTmux
  map <C-F> <Plug>SendFocusedTestToTmux

" Section: NerdTree - Project Sidebar
  " quit NERDTree after openning a file
  let NERDTreeQuitOnOpen=1
  " Toggle NERDTree with <leader>,
  map <silent> <leader>. :execute 'NERDTreeToggle ' . getcwd()<CR>
  " Open current file in nerdtree
  nmap \| :execute 'NERDTreeFind'<CR>

" Section: Autocompletion!
  let g:ycm_collect_identifiers_from_tags_files = 1

  autocmd FileType ruby set omnifunc=rubycomplete#Complete
  autocmd FileType python set omnifunc=pythoncomplete#Complete
  autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
  autocmd FileType php set omnifunc=phpcomplete#CompletePHP
  autocmd FileType c set omnifunc=ccomplete#Complete

" Section: Syntastic!
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 0
  let g:syntastic_auto_loc_list = 0
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
